!function Global() {
    var $ = window.$
    if ($ !== window.pageJquery) {
        window.$ = window.jQuery = window.pageJquery
    }

    var isIE = navigator.userAgent.match(/msie\s*(\d+)|rv:\s*11/i)
    if (window.bfreeWorking || isIE && isIE[1] && isIE[1] < 10) return

    var isInFrame = top !== window,
        shouldUseBfree = isInFrame || ~location.search.indexOf("bfree") && (setCookie("bfree", "1"), true) || !!getCookie("bfree")

    if (!shouldUseBfree) {
        return addEntrance()
        // return
    }

    var cssZoomFactor = 1,
        cssScaleFactor = 1,
        pageZoom = 1,
        useCssZoom = !isIE && !navigator.userAgent.match(/mozilla|opera/),
        bfreeTool = window.bfreeTool = BfreeTool(),
        ignoreBelowEvent = supportKeyboard(),
        winMessage = window.winMessage = createWinMessage()

    window.bfreeWorking = true

    /**
     * 在顶层窗口收集所有子孙窗口的 window 对象及 frame_id，用于多层嵌套窗口时识别窗口
     */
    if (isInFrame) {
        var frame_id = Math.random().toString(16)
        winMessage.send(top, "connect", frame_id)
    } else {
        var frameWindows = {}
        winMessage.addCommandHandler("connect", function (reply, frame_id) {
            frameWindows[frame_id] = reply.target
        })
    }

    $(function () {
        var workbench = null,
            mouseCapture = new EventCapture("mouseover"),
            focusCapture = new EventCapture("focusin"),
            clickCapture = new EventCapture("click"),
            leaveCapture = new EventCapture("mouseout"),
            moveCapture = new EventCapture("mousemove"),
            keyupCapture = new EventCapture("keyup")

        window.scrollToView = scrollToView

        !function Main() {
            handlePageSetting(window.bfreePageSetting)
            handlePageSetting(window.bfreePageSetting_1)
            handlePageSetting(window.bfreePageSetting_2)
            setImgCode()

            $("body>.sidebar").hide()

            /**
             * 用于窗口获取顶层窗口的信息及自身在顶层窗口的位置信息
             * 多层嵌套窗口时，会逐层获取并累加
             */
            winMessage.addCommandHandler("frameOutsideInfo", function (reply) {
                var frameElem = getFrameElem(reply.target),
                    outsideInfo = {
                        workbench_height: isInFrame ? 0 : workbench.height(),
                        scrollTop: getBodyAttribute("scrollTop"),
                        height: $(frameElem).height(),
                        top: offset(frameElem).top
                    }

                if (!isInFrame) reply(outsideInfo)

                winMessage.send(parent, "frameOutsideInfo").waitReply(function (_reply, _outsideInfo) {
                    outsideInfo.workbench_height += _outsideInfo.workbench_height
                    outsideInfo.scrollTop += _outsideInfo.scrollTop
                    outsideInfo.top += _outsideInfo.top

                    reply(outsideInfo)
                })
            })

            if (isInFrame) {
                var frame_elem_id = 0,
                    outsideInfo = null

                mouseCapture.set("sendMouseCommand", sendEventComand("mouse"))
                focusCapture.set("sendFocusCommand", sendEventComand("focus"))
                clickCapture.set("sendClickCommand", sendEventComand("click"))
                leaveCapture.set("sendLeaveCommand", sendEventComand("leave"))
                moveCapture.set("sendMoveCommand", sendEventComand("move"))
                keyupCapture.set("sendKeyupCommand", sendEventComand("keyup"))

                winMessage.addCommandHandler("extractText", function (reply, elem_id, isPrependElemDesc, isDeep) {
                    var elem = getElemById(elem_id)
                    if (!elem) return

                    extractText(elem, isPrependElemDesc, isDeep).then(reply)
                })

                winMessage.addCommandHandler("getNextElem", function (reply, elem_id) {
                    var elem

                    if (elem_id) {
                        elem = getElemById(elem_id)
                        if (!elem) return reply()
                    } else if (reply.target.parent === window) {
                        /* 从子窗口发出的命令，使用子窗口的 iframe 元素作为参考获取下一个元素 */
                        elem = getFrameElem(reply.target)
                    } else if (reply.target === parent) {
                        /* 从父窗口发出的命令，使用 body 元素的前一个元素作为参考获取下一个元素 */
                        elem = document.body.previousSibling
                    }

                    getNextElem(elem).then(function (nextElemOrFrameInfo) {
                        var next

                        if (isFrameInfo(nextElemOrFrameInfo)) {
                            /* postMessage 不能传递 window 对象，先删除，后面在 top 窗口通过 frame_id 找回 */
                            delete nextElemOrFrameInfo.frame
                            next = nextElemOrFrameInfo
                        } else if (nextElemOrFrameInfo) {
                            next = getElemId(nextElemOrFrameInfo)
                        }

                        reply(frame_id, next)
                    })
                })

                winMessage.addCommandHandler("markPlayingElem", function (reply, elem_id, shouldMark) {
                    var elem = getElemById(elem_id)
                    if (!elem) return

                    markPlayingElem(elem, shouldMark)
                })

                winMessage.addCommandHandler("zoom", function (reply, zoom) {
                    bfreeTool.zoom.setZoom(zoom)
                    $("iframe").toArray().forEach(function (frame) {
                        winMessage.send(frame.contentWindow, "zoom", zoom)
                    })
                })

                var updateOutsideInfo = throttle(function () {
                    winMessage.send(parent, "frameOutsideInfo").waitReply(function (reply, _outsideInfo) {
                        outsideInfo = _outsideInfo
                    })
                }, 1000)

                moveCapture.set("updateOutsideInfo", updateOutsideInfo)

                function sendEventComand(command) {
                    return function (e) {
                        var eventInfo = {
                            elem_id: getElemId(e.target),
                            outsideInfo: outsideInfo,
                            type: e.type,
                            clientX: e.clientX,
                            clientY: e.clientY,
                            key: e.key,
                            keyCode: e.keyCode,
                            ctrlKey: e.ctrlKey,
                            altKey: e.altKey,
                            shiftKey: e.shiftKey,
                        }
                        winMessage.send(top, command, eventInfo)
                    }
                }

                /**
                 * postMessage 不能传递 element 对象
                 * 通过 getElemId 方法，用一个 id 标识 element 对象，用于窗口间传递
                 * 通过 getElemById 方法，用 id 查找 element 对象
                 */
                function getElemId(elem) {
                    var nodeType = elem.nodeType

                    if (nodeType === 3) {
                        var parent = elem.parentNode,
                            elem_text_id = $(parent).attr("elem_text_id") || "",
                            child_elem_text_id = "",
                            childIndex = $(parent.childNodes).toArray().findIndex(function (child) { return child === elem }),
                            child_elem_text_prefix = "text_" + childIndex + "_"

                        if (!elem_text_id || !~elem_text_id.indexOf(child_elem_text_prefix)) {
                            child_elem_text_id = child_elem_text_prefix + ++frame_elem_id
                            elem_text_id = elem_text_id ? [elem_text_id, child_elem_text_id].join(",") : child_elem_text_id
                            $(parent).attr("elem_text_id", elem_text_id)
                            elem.elem_text_id = child_elem_text_id
                        } else {
                            child_elem_text_id = elem_text_id.match(new RegExp(child_elem_text_prefix + "[^,]+"))[0]
                        }

                        return child_elem_text_id
                    } else {
                        return $(elem).attr("elem_id") || ($(elem).attr("elem_id", ++frame_elem_id), "" + frame_elem_id)
                    }
                }

                function getElemById(elem_id) {
                    var isText = elem_id.indexOf("text_") === 0

                    if (isText) {
                        var parent = $("[elem_text_id*=" + elem_id + "]")[0],
                            childs = parent && $(parent.childNodes).toArray()

                        if (!childs) return

                        for (var i = 0, len = childs.length; i < len; i++) {
                            if (childs[i].elem_text_id == elem_id) {
                                return childs[i]
                            }
                        }
                    } else {
                        return $("[elem_id=" + elem_id + "]")[0]
                    }
                }
            } else {
                workbench = createWorkbench()
                workbench.init()

                winMessage.addCommandHandler("mouse", function (reply, eventInfo) {
                    var frameInfo = createFrameInfo(reply.target, eventInfo)

                    mouseCapture.trigger(["voice_point", "text_screen", "voice_continuous"], frameInfo)
                })

                winMessage.addCommandHandler("focus", function (reply, eventInfo) {
                    var frameInfo = createFrameInfo(reply.target, eventInfo)

                    focusCapture.trigger(["voice_point", "text_screen"], frameInfo)
                })

                winMessage.addCommandHandler("click", function (reply, eventInfo) {
                    var frameInfo = createFrameInfo(reply.target, eventInfo)

                    clickCapture.trigger(["voice_continuous"], frameInfo)
                })

                winMessage.addCommandHandler("leave", function (reply, eventInfo) {
                    var frameInfo = createFrameInfo(reply.target, eventInfo)

                    leaveCapture.trigger(["voice_continuous"], frameInfo)
                })

                winMessage.addCommandHandler("move", function (reply, eventInfo) {
                    var clientX = eventInfo.clientX + (eventInfo.clientX - getBodyAttribute("clientWidth") / 2) * (cssScaleFactor - 1),
                        clientY = eventInfo.clientY * cssScaleFactor,
                        frameTop = eventInfo.outsideInfo.top,
                        frameInfo = createFrameInfo(reply.target, {
                            elem_id: eventInfo.elem_id,
                            clientX: clientX,
                            clientY: clientY + frameTop * pageZoom - getBodyAttribute("scrollTop")
                        })

                    moveCapture.trigger(["cross_line"], frameInfo)
                })

                winMessage.addCommandHandler("keyup", function (reply, eventInfo) {
                    var frameInfo = createFrameInfo(reply.target, eventInfo)

                    keyupCapture.trigger(["shortcut", "continuousPlay_enter"], frameInfo)
                })

                winMessage.addCommandHandler("scrollTo", function (reply, scrollYOffset) {
                    window.scrollTo(0, scrollYOffset)
                })

                winMessage.addCommandHandler("playSource", function (reply, source, config) {
                    bfreeTool.voice.pause()
                    bfreeTool.voice.playSource(source, config)
                })
            }
        }()

        function createWorkbench() {
            function Workbench() {
                this.shortcut = new Shortcut()

                this.initConfig()
            }

            Workbench.prototype = {
                constructor: Workbench,
                init: function () {
                    var bfree_css = '<style id="bfree_css_main" class="bfree_css">.bfree_elem{user-select: none;}#bfree_view_main{width:100%;height:90px;margin:0;padding:0;}.bfree_bg *{margin:0;padding:0;list-style:none;line-height:2;outline:none}.bfree_bg img{border:0;vertical-align:bottom}.bfree_bg a{text-decoration:none}.bfree_bg{width:100%;height: 90px;background:#043b64;position:fixed;left:0;top:0;z-index:1002;white-space: nowrap;}.bfree_nav{max-width:878px;margin:0 auto;}.bfree_nav .tit{width:112px;height:100%;background:url("/cn/bfree/images/line-1.png") no-repeat right bottom;background-size: 4px;display:inline-block;float:left}.bfree_nav .tit ul{margin:66px 0 0 10px;padding:4px;background:#248ff9;display:inline-block;border-radius:5px}.bfree_nav .tit span{padding:2px 5px;font-size:11pt;line-height:1.25;color:#fff;display:inline-block;border:1px solid #fff;border-radius:3px}@media screen and (max-width:944px){    .bfree_nav{text-align:center}    .bfree_nav .tit{display:none}}.bfree_nav .lis img{width:100%;display:inline-block;float:left;}.bfree_nav .lis > i{display:inline-block;float:left}.bfree_nav .lis > ul .line{width:8px;height:50px;display: inline-block;}.bfree_nav .lis > ul li{width:54px;height:77px;margin:10px 0 0 6px;text-align:center;display:inline-block;vertical-align: top;}.bfree_nav .lis > ul li .bfree_btn{cursor:pointer;width:100%;font-size:9pt;color:#fff;display:inline-block;white-space: normal;}.bfree_nav .lis > ul li .bfree_btn:hover{color:#fff}.bfree_nav .lis > ul li ul{width:117px;margin-top:60px;margin-left: -54px;background:#fff;border-radius:3px;box-shadow:1px 1px 4px #666;position:relative;display:none;vertical-align: top;white-space: normal;}.bfree_nav .lis > ul li ul hr{height:0px;margin:0 7px;background:#eee;border-top:0;border-left:0}.bfree_nav .lis > ul li ul .myArrow1{width:14px;height:6px;margin:-4px 0 3px 42px;display:block;position:relative;}.bfree_nav .lis .drop_list li{width: calc(100% - 7px);height: auto;margin: 0 3px;padding: 4px 0;}.bfree_nav .lis > ul li li .bfree_btn{font-weight:bold;color:#333;white-space: nowrap;}.bfree_nav .lis > ul li li .bfree_btn:hover{color:#0066B3}.bfree_nav .lis > ul li:hover .drop_list{display:inline-block;}.bfree_nav .lis .drop_list li.active{color:#0066B3;background:url("/cn/bfree/images/active1.png") no-repeat 7px 10px}.bfree_nav .lis .drop_list li.active .bfree_btn{color:#0066B3;}.bfree_nav .lis > ul li ul.programme{width:140px}.bfree_nav .lis > ul li ul.shubiao{width:62px;text-align:right}.bfree_nav .lis > ul li ul.shubiao li img{width:30px;display:inline;float:right}.bfree_nav .lis > ul li ul.shubiao hr{display:none}.bfree_nav .lis .drop_list.shubiao li.active{background-position:7px 12px}.bfree_nav .lis > ul li ul.highContrast{width:94px;border:0;outline:0}.bfree_nav .lis > ul li ul.highContrast span{padding:0 3px;display:inline-block;float:right}#bfree_list_highContrast_1 span{background:#fff;color:#000;border:1px solid #ccc}#bfree_list_highContrast_2 span{background:#00f;color:#ff0;border:1px solid #00f}#bfree_list_highContrast_3 span{background:#ff0;color:#000;border:1px solid #ff0}#bfree_list_highContrast_4 span{background:#000;color:#ff0;border:1px solid #000}#bfree_view_reader{width:100%;height:83px;margin:0;padding:0;}.bfree_spkoly_bg *{margin:0;padding:0;list-style:none;line-height:2;outline:none}.bfree_spkoly_bg img{border:0;vertical-align:bottom}.bfree_spkoly_bg .bfree_btn{text-decoration:none;display:inline-block}.bfree_spkoly_bg{width:100%;background:#043b64;position:fixed;left:0;top:0;z-index:1004;}.bfree_spkoly{height:73px;margin:0 auto;padding-top:10px;text-align: center;}.bfree_spkoly .bfree_spkoly_lis{text-align:center;display: inline-block;}.bfree_spkoly .bfree_spkoly_lis .bfree_btn{width:98px;font-size:10pt;color:#fff;line-height:1.3;text-align:left}.bfree_spkoly .bfree_spkoly_lis b{font-size:14pt;color:#fff;display:inline-block}.bfree_spkoly .bfree_spkoly_lis span{color:#ff9c00}.bfree_spkoly .bfree_spkoly_nav{display: inline-block;vertical-align: top;margin-top: 7px;}.bfree_spkoly .bfree_spkoly_nav .bfree_btn{margin-left:7px;border-radius:3px}#bfree_view_bigtext{width:100%;height:125px;margin: 0;padding: 0;}.TextScreen{width:100%;height:125px;background:#043b64;color:#fff;position:fixed;left:0;bottom:0;z-index:1003;}.TextScreen *{margin:0;padding:0;list-style:none}.TextScreen a{color:#fff;text-decoration:none}.TextScreen .BTnav{float:right}.TextScreen .BTnav a{text-align:center;display:inline-block}.TextScreen .BTnav .nav{width:73px;float:right}.TextScreen .BTnav .nav a{width:62px;margin:5px 3px 0 0;font-size:12pt;border:1px solid #fff;border-radius:3px;}.TextScreen .BTnav .nav #bfree_BT_s,.TextScreen .BTnav .nav #bfree_BT_t{width:28px}.TextScreen .BTnav .highContrast{width:77px;float:left}.TextScreen .BTnav .highContrast a{width:73px;margin:3px 3px 0 0;font-size:10pt;line-height:1.5;border-radius:0 3px 3px 0}.TextScreen .BTnav .highContrast #bigtext_hic_t1{background:#fff;color:#000}.TextScreen .BTnav .highContrast #bigtext_hic_t2{background:#00f;color:#ff0}.TextScreen .BTnav .highContrast #bigtext_hic_t3{background:#ff0;color:#000}.TextScreen .BTnav .highContrast #bigtext_hic_t4{background:#000;color:#ff0}.TextScreen .BTnav .highContrast #bigtext_hic_t5{border-right:0px solid #fff}.TextScreen i.icon{width:42px;height:42px;margin-bottom:-26px;background:url("/cn/bfree/images/quit1.png") no-repeat;position:relative;display:inline-block;cursor:pointer;float:right}.TextScreen .BTcont{height:118px;margin-top:3px;padding:0 7px;overflow-y:auto;scrollbar-face-color:#61def5;scrollbar-highlight-color:#61def5;scrollbar-track-color:#085187;}.TextScreen .BTcont::-webkit-scrollbar{width:7px;height:0px}.TextScreen .BTcont::-webkit-scrollbar-thumb{border-radius:7px;box-shadow:inset 0 0 3px rgba(0,0,0,0.2);background:#61def5;}.TextScreen .BTcont::-webkit-scrollbar-track{border-radius:7px;box-shadow:inset 0 0 3px rgba(0,0,0,0.2);background:#085187;}.TextScreen .BTcont h1{color:#fff;font-size:29pt;font-weight:bold;line-height:1.4;text-align:center}#slideLateral{width:100%;height:3px;}#slideLongitudinal{width:3px;height:100%;}#slideLateral, #slideLongitudinal{position:fixed;background-color:#ff0000;overflow:hidden;z-index:999999999;left:0;top:0;}.bfree_active{background:#000;color:#fff}.icon{font-style:normal;display:inline-block}.bfree_nav .icon,.bfree_spkoly .icon{width:55px!important;height:50px!important;background-size: 38px;border-radius:3px;position: static;}.icon.back{background: url(/cn/bfree/images/icons/back.png) no-repeat;background-size: contain;}.icon.back:hover{background: url(/cn/bfree/images/icons/back_hover.png) no-repeat;background-size: contain;}.icon.bigtextOff{background: url(/cn/bfree/images/icons/bigtextOff.png) no-repeat;background-size: contain;}.icon.bigtextOff:hover{background: url(/cn/bfree/images/icons/bigtextOff_hover.png) no-repeat;background-size: contain;}.icon.home{background: url(/cn/bfree/images/icons/home.png) no-repeat;background-size: contain;}.icon.home:hover{background: url(/cn/bfree/images/icons/home_hover.png) no-repeat;background-size: contain;}.icon.guides{background: url(/cn/bfree/images/icons/guides.png) no-repeat;background-size: contain;}.icon.guides:hover{background: url(/cn/bfree/images/icons/guides_hover.png) no-repeat;background-size: contain;}.icon.help{background: url(/cn/bfree/images/icons/help.png) no-repeat;background-size: contain;}.icon.help:hover{background: url(/cn/bfree/images/icons/help_hover.png) no-repeat;background-size: contain;}.icon.highContrast{background: url(/cn/bfree/images/icons/highContrast.png) no-repeat;background-size: contain;}.icon.highContrast:hover{background: url(/cn/bfree/images/icons/highContrast_hover.png) no-repeat;background-size: contain;}.icon.mouseArrow{background: url(/cn/bfree/images/icons/mouseArrow.png) no-repeat;background-size: contain;}.icon.mouseArrow:hover{background: url(/cn/bfree/images/icons/mouseArrow_hover.png) no-repeat;background-size: contain;}.icon.pageZoomIn{background: url(/cn/bfree/images/icons/pageZoomIn.png) no-repeat;background-size: contain;}.icon.pageZoomIn:hover{background: url(/cn/bfree/images/icons/pageZoomIn_hover.png) no-repeat;background-size: contain;}.icon.pageZoomDe{background: url(/cn/bfree/images/icons/pageZoomDe.png) no-repeat;background-size: contain;}.icon.pageZoomDe:hover{background: url(/cn/bfree/images/icons/pageZoomDe_hover.png) no-repeat;background-size: contain;}.icon.pointerOff{background: url(/cn/bfree/images/icons/pointerOff.png) no-repeat;background-size: contain;}.icon.pointerOff:hover{background: url(/cn/bfree/images/icons/pointerOff_hover.png) no-repeat;background-size: contain;}.icon.pointerOn{background: url(/cn/bfree/images/icons/pointerOn.png) no-repeat;background-size: contain;}.icon.pointerOn:hover{background: url(/cn/bfree/images/icons/pointerOn_hover.png) no-repeat;background-size: contain;}.icon.preview{background: url(/cn/bfree/images/icons/preview.png) no-repeat;background-size: contain;}.icon.preview:hover{background: url(/cn/bfree/images/icons/preview_hover.png) no-repeat;background-size: contain;}.icon.programme{background: url(/cn/bfree/images/icons/programme.png) no-repeat;background-size: contain;}.icon.programme:hover{background: url(/cn/bfree/images/icons/programme_hover.png) no-repeat;background-size: contain;}.icon.programme_1{background: url(/cn/bfree/images/icons/programme_1.png) no-repeat;background-size: contain;}.icon.programme_1:hover{background: url(/cn/bfree/images/icons/programme_1_hover.png) no-repeat;background-size: contain;}.icon.programme_2{background: url(/cn/bfree/images/icons/programme_2.png) no-repeat;background-size: contain;}.icon.programme_2:hover{background: url(/cn/bfree/images/icons/programme_2_hover.png) no-repeat;background-size: contain;}.icon.quit{background: url(/cn/bfree/images/icons/quit.png) no-repeat;background-size: contain;}.icon.quit:hover{background: url(/cn/bfree/images/icons/quit_hover.png) no-repeat;background-size: contain;}.icon.services{background: url(/cn/bfree/images/icons/services.png) no-repeat;background-size: contain;}.icon.services:hover{background: url(/cn/bfree/images/icons/services_hover.png) no-repeat;background-size: contain;}.icon.soundOff{background: url(/cn/bfree/images/icons/soundOff.png) no-repeat;background-size: contain;}.icon.soundOff:hover{background: url(/cn/bfree/images/icons/soundOff_hover.png) no-repeat;background-size: contain;}.icon.soundOn{background: url(/cn/bfree/images/icons/soundOn.png) no-repeat;background-size: contain;}.icon.soundOn:hover{background: url(/cn/bfree/images/icons/soundOn_hover.png) no-repeat;background-size: contain;}.icon.speaking{background: url(/cn/bfree/images/icons/speaking.png) no-repeat;background-size: contain;}.icon.speaking:hover{background: url(/cn/bfree/images/icons/speaking_hover.png) no-repeat;background-size: contain;}.icon.speakingOff{background: url(/cn/bfree/images/icons/speakingOff.png) no-repeat;background-size: contain;}.icon.speakingOff:hover{background: url(/cn/bfree/images/icons/speakingOff_hover.png) no-repeat;background-size: contain;}.icon.speakonly{background: url(/cn/bfree/images/icons/speakonly.png) no-repeat;background-size: contain;}.icon.speakonly:hover{background: url(/cn/bfree/images/icons/speakonly_hover.png) no-repeat;background-size: contain;}.icon.speedDown{background: url(/cn/bfree/images/icons/speedDown.png) no-repeat;background-size: contain;}.icon.speedDown:hover{background: url(/cn/bfree/images/icons/speedDown_hover.png) no-repeat;background-size: contain;}.icon.speedUp{background: url(/cn/bfree/images/icons/speedUp.png) no-repeat;background-size: contain;}.icon.speedUp:hover{background: url(/cn/bfree/images/icons/speedUp_hover.png) no-repeat;background-size: contain;}.icon.textonly{background: url(/cn/bfree/images/icons/textonly.png) no-repeat;background-size: contain;}.icon.textonly:hover{background: url(/cn/bfree/images/icons/textonly_hover.png) no-repeat;background-size: contain;}</style>'
                    var $bfree_html = $('<div id="bfree_view_main" class="bfree_elem bfree_zoom"><div class="bfree_bg"><div class="bfree_nav" id="bfreeNav"><div class="lis"><ul><li><span class="bfree_btn"><i class="icon soundOn"></i>声音开关</span></li><li><span class="bfree_btn"><i class="icon pointerOn"></i>语音指读</span></li><li><span class="bfree_btn"><i class="icon speaking"></i>语音连读</span></li><i class="line"></i><li><span class="bfree_btn"><i class="icon bigtextOff"></i>大字幕</span></li><li><span class="bfree_btn"><i class="icon pageZoomIn"></i>页面增大</span></li><li><span class="bfree_btn"><i class="icon pageZoomDe"></i>页面缩小</span></li><i class="line"></i><li><span class="bfree_btn"><i class="icon highContrast"></i>配色</span><ul class="drop_list"><i class="myArrow1"><img src="/cn/bfree/images/arrows-1.png"></i><li><span class="bfree_btn" theme="#fff_#000">白底黑字</span></li><hr><li><span class="bfree_btn" theme="#00f_#ff0">蓝底黄字</span></li><hr><li><span class="bfree_btn" theme="#ff0_#000">黄底黑字</span></li><hr><li><span class="bfree_btn" theme="#000_#ff0">黑底黄字</span></li><hr><li class="active"><span class="bfree_btn">原始配色</span></li></ul></li><li><span class="bfree_btn"><i class="icon speedUp"></i>语音加速</span></li><li><span class="bfree_btn"><i class="icon speedDown"></i>语音减速</span></li><i class="line"></i><li><span class="bfree_btn"><i class="icon mouseArrow"></i>鼠标样式</span><ul class="drop_list shubiao" style="width: 90px;text-align: right;"><i class="myArrow1"><img src="/cn/bfree/images/arrows-1.png"></i><li><span class="bfree_btn" cursor="shubiao_bai"><img src="/cn/bfree/images/shubiao_bai.png"></span></li><hr><li><span class="bfree_btn" cursor="shubiao_huang"><img src="/cn/bfree/images/shubiao_huang.png"></span></li><hr><li><span class="bfree_btn" cursor="shubiao_lan"><img src="/cn/bfree/images/shubiao_lan.png"></span></li><hr><li><span class="bfree_btn" cursor="shubiao_lv"><img src="/cn/bfree/images/shubiao_lv.png"></span></li><hr><li class="active"><span class="bfree_btn"><img src="/cn/bfree/images/shubiao_ys.png"></span></li></ul></li><li><span class="bfree_btn"><i class="icon guides"></i>十字线</span></li><li><span class="bfree_btn"><i class="icon help"></i>帮助</span></li><i class="line"></i><li><span class="bfree_btn"><i class="icon speakonly"></i>读屏专用</span></li><li><span class="bfree_btn"><i class="icon quit"></i>退出服务</span></li></ul></div></div></div></div>'),
                        $reader_html = $('<div id="bfree_view_reader" class="bfree_elem bfree_zoom"><div class="bfree_spkoly_bg" id="SpeakerOnly"><div class="bfree_spkoly"><div class="bfree_spkoly_lis"><a class="bfree_btn" href="javascript:void(0)" id="nav_nav"><b>导航区</b><span>(6)</span><br>ALT+1</a><a class="bfree_btn" href="javascript:void(0)" id="nav_window"><b>视窗区</b><span>(6)</span><br>ALT+2</a><a class="bfree_btn" href="javascript:void(0)" id="nav_interactive"><b>交互区</b><span>(2)</span><br>ALT+3</a><a class="bfree_btn" href="javascript:void(0)" id="nav_list"><b>列表区</b><span>(2)</span><br>ALT+4</a><a class="bfree_btn" href="javascript:void(0)" id="nav_article"><b>正文区</b><span>(2)</span><br>ALT+5</a><a class="bfree_btn" href="javascript:void(0)" id="nav_servis"><b>服务区</b><span>(3)</span><br>ALT+6</a></div><div class="bfree_spkoly_nav"><a class="bfree_btn" name="声音开关" href="javascript:void(0)" title="当前声音已关闭，开启声音Shift+A" id="bfree_spk_soundOnOff"><i class="icon soundOn"></i></a><a class="bfree_btn" name="帮助" href="/cn/bfree/help.html" title="开启操作说明Shift+问号键"><i class="icon help"></i></a><a class="bfree_btn" name="大字幕" href="javascript:void(0)" title="当前大字幕已开启，关闭大字幕Shift+K" id="bfree_spk_BigText"><i class="icon bigtextOff"></i></a><a class="bfree_btn" name="老人服务" href="javascript:void(0)" title="老人服务：快捷键Shift+1，适用于视力和文化认知底下的人群" id="bfree_spk_speakOnly"><i class="icon speakonly"></i></a><a class="bfree_btn" name="退出服务" href="javascript:void(0)" title="退出服务Shift+Esc" id="bfree_spk_exit"><i class="icon quit"></i></a></div></div></div></div></div>')

                    $("body").prepend($reader_html)
                    $("body").prepend($bfree_html)
                    $("body").prepend('<script src="/cn/v3/js/tts.min.js"></script>')
                    $("body").prepend(bfree_css)

                    this.$elem = $bfree_html
                    this.$reader_elem = $reader_html
                    this.$reader_elem.hide()

                    $(".bfree_btn", this.$elem).each(function (i, elem) {
                        var name = $(elem).text()
                        $(elem).find(".icon").attr("aria-label", name)
                    })

                    $(".bfree_btn", this.$reader_elem).each(function (i, elem) {
                        var name = $(elem).attr("name")
                        $(elem).find(".icon").attr("aria-label", name)
                    })

                    this.setButton()
                    this.setShortCut()
                },
                setShortCut: function () {
                    var shortcut = this.shortcut

                    // shortcut.set("alt+shift+`", trigger("click", Button("首页")))
                    // shortcut.set("alt+shift+.", trigger("click", Button("前进")))
                    // shortcut.set("alt+shift+,", trigger("click", Button("后退")))
                    shortcut.set("alt+shift+q", trigger("click", Button("退出服务")))
                    // shortcut.set("alt+shift+h", trigger("click", Button("视力障碍专用")))
                    // shortcut.set("alt+shift+t", trigger("click", Button("听力障碍专用")))
                    // shortcut.set("alt+shift+m", trigger("click", Button("默认方案")))
                    shortcut.set("alt+shift+?", trigger("click", Button("帮助")))
                    shortcut.set("alt+shift+l", trigger("click", Button("声音开关")))
                    shortcut.set("alt+shift+-", trigger("click", Button("语音指读")))
                    shortcut.set("alt+shift+=", trigger("click", Button("语音连读")))
                    // shortcut.set("alt+shift+3", trigger("click", Button("纯文本")))
                    shortcut.set("alt+shift+[39]", trigger("click", Button("语音加速"))) //右箭头
                    shortcut.set("alt+shift+[37]", trigger("click", Button("语音减速"))) //左箭头
                    shortcut.set("alt+shift+[219]", trigger("click", Button("大字幕"))) //[
                    shortcut.set("alt+shift+7", trigger("click", Button("页面增大")))
                    shortcut.set("alt+shift+8", trigger("click", Button("页面缩小")))
                    shortcut.set("alt+shift+2", dropListTrigger("click", Button("鼠标样式")))
                    shortcut.set("alt+shift+5", dropListTrigger("click", Button("配色")))
                    shortcut.set("alt+shift+6", trigger("click", Button("十字线")))
                    shortcut.set("alt+shift+z", trigger("click", Button("读屏专用")))

                    shortcut.set("shift+1", trigger("click", Button("老人服务")))

                    function trigger(eventType, $btn) {
                        return function () {
                            $btn.eq(0).trigger(eventType)
                        }
                    }

                    function dropListTrigger(eventType, $btn) {
                        var $dropList = $btn.next(".drop_list"),
                            $btns = $dropList.find(".bfree_btn").parent(),
                            count = $btns.length
                        return function () {
                            var nextIndex = ($btns.index($dropList.find(".active")) + 1) % count
                            $btns.eq(nextIndex).find(".bfree_btn").trigger(eventType)
                        }
                    }
                },
                setButton: function () {
                    var restore = ignoreBelowEvent()

                    var workbench = this

                    // Button("首页").click(go("/cn/home/indexv3.html"))

                    // Button("后退").click(function () {
                    //     window.history.back()
                    // })

                    // Button("前进").click(function () {
                    //     window.history.forward()
                    // })

                    Button("声音开关")
                        .$on(function () {
                            setIcon("声音开关", "soundOn")
                            this.attr("title", "当前声音已开启，关闭声音Alt+Shift+L")

                            bfreeTool.voice.on()
                            workbench.setConfig("soundOff", false)
                        })
                        .$off(function () {
                            setIcon("声音开关", "soundOff")
                            this.attr("title", "当前声音已关闭，开启声音Alt+Shift+L")

                            bfreeTool.voice.off()
                            workbench.setConfig("soundOff", "1")
                        })

                    Button("语音指读")
                        .$on(function () {
                            Button("语音连读").$off()
                            setIcon("语音指读", "pointerOn")

                            var play = debounce(bfreeTool.voice.play.bind(bfreeTool.voice), 200),
                                lastText = "", sid

                            function voicePointHandler(e) {
                                extractText(e).then(function (text) {
                                    if (lastText === text) return

                                    if (sid) clearTimeout(sid)

                                    lastText = text
                                    sid = setTimeout(function () {
                                        lastText = ""
                                    }, 300)

                                    play(text)
                                })
                            }

                            mouseCapture.set("voice_point", voicePointHandler)
                            focusCapture.set("voice_point", function (e) {
                                setTimeout(voicePointHandler, 200, e)
                            })
                        })
                        .$off(function () {
                            setIcon("语音指读", "pointerOff")

                            mouseCapture.remove("voice_point")
                            focusCapture.remove("voice_point")
                            bfreeTool.voice.pause()
                        })

                    Button("语音连读")
                        .$on(function () {
                            Button("语音指读").$off()
                            setIcon("语音连读", "speaking")

                            var isPlaying = false,
                                playVoice = bfreeTool.voice.play.bind(bfreeTool.voice),
                                sid, lastText

                            function voiceContinuousHandler(e) {
                                if (isPlaying) return

                                if (sid) clearTimeout(sid)

                                sid = setTimeout(function () {
                                    sid = void 0
                                    isPlaying = true
                                    continuousPlay(e)
                                }, 2000)

                                function continuousPlay(elem) {
                                    console.log("continuousPlay", elem)
                                    if (!elem) {
                                        console.log("连读结束")
                                        lastText = void 0
                                        return isPlaying = false
                                    }

                                    extractText(elem)
                                        .then(function (text) {
                                            if (lastText === text) text = ""
                                            text && markPlayingElem(elem, true)
                                            return text
                                        })
                                        .then(playVoice)
                                        .then(function (text) {
                                            text && (lastText = text, markPlayingElem(elem))

                                            if (isPlaying) return elem
                                            throw "中断连读"
                                        })
                                        .then(getNextElem)
                                        .then(continuousPlay)
                                    ["catch"](function (err) {
                                        console.error(err)
                                        lastText = void 0
                                        isPlaying = false
                                    })
                                }
                            }

                            function clearContinuousPlay() {
                                if (sid) clearTimeout(sid)
                                sid = void 0
                            }

                            function stopContinuousPlay() {
                                clearContinuousPlay()
                                isPlaying = false
                                bfreeTool.voice.pause()
                            }

                            this.stopContinuousPlay = stopContinuousPlay

                            bfreeTool.voice.play("开启连读模式。请将鼠标移到需要阅读文字上，2秒后开始阅读。在阅读链接时敲击回车键即可进入链接指向的页面")
                            ["catch"](function () {
                                setIcon("语音连读", "speakingOff")
                            })
                            setTimeout(function () {
                                mouseCapture.set("voice_continuous", voiceContinuousHandler)
                                clickCapture.set("voice_continuous", stopContinuousPlay)
                                leaveCapture.set("voice_continuous", clearContinuousPlay)
                            }, 500)
                        })
                        .$off(function () {
                            setIcon("语音连读", "speakingOff")

                            this.stopContinuousPlay && this.stopContinuousPlay()
                            mouseCapture.remove("voice_continuous")
                            clickCapture.remove("voice_continuous")
                            leaveCapture.remove("voice_continuous")
                        })

                    Button("大字幕")
                        .$on(function () {
                            bfreeTool.textScreen.show()

                            function textScreenHandler(e) {
                                extractText(e, false).then(function (text) {
                                    text && bfreeTool.textScreen.setText(text)
                                })
                            }

                            mouseCapture.set("text_screen", textScreenHandler)
                            focusCapture.set("text_screen", textScreenHandler)

                            this.attr("title", "当前大字幕已开启，关闭大字幕Alt+Shift+[")
                        })
                        .$off(function () {
                            bfreeTool.textScreen.hide()

                            mouseCapture.remove("text_screen")
                            focusCapture.remove("text_screen")

                            this.attr("title", "当前大字屏已关闭，开启打字屏Alt+Shift+[")
                        })

                    Button("页面增大").click(function () {
                        bfreeTool.zoom.increase()
                        $("iframe").toArray().forEach(function (frame) {
                            winMessage.send(frame.contentWindow, "zoom", cssZoomFactor)
                        })

                        workbench.keepSize()
                    })

                    Button("页面缩小").click(function () {
                        bfreeTool.zoom.decrease()
                        $("iframe").toArray().forEach(function (frame) {
                            winMessage.send(frame.contentWindow, "zoom", cssZoomFactor)
                        })

                        workbench.keepSize()
                    })

                    Button("读屏专用").click(function () {
                        workbench.$reader_elem.show()
                        workbench.$elem.hide()
                        workbench.setReaderArea()
                        workbench.setConfig("reader_area", "1")
                    })

                    // Button("视力障碍专用").click(function () {
                    //     setIcon("推荐方案", "programme_1")

                    //     Button("声音开关").$on()
                    //     Button("大字幕").$on()
                    //     Button("语音连读").$on()
                    //     bfreeTool.voice.speedReset()
                    // })

                    // Button("听力障碍专用").click(function () {
                    //     setIcon("推荐方案", "programme_2")

                    //     Button("声音开关").$on()
                    //     Button("大字幕").$off()
                    //     Button("语音指读").$on()
                    //     Button("语音减速").click()
                    //     bfreeTool.voice.pause()
                    // })

                    // Button("默认方案").click(function () {
                    setIcon("推荐方案", "programme")

                    Button("声音开关").$on()
                    Button("大字幕").$off()
                    Button("语音指读").$on()
                    bfreeTool.voice.speedReset()
                    // })

                    // Button("开立银行账户").click(go("http://www.ccb.com/tran/WCCMainPlatV5?CCB_IBSVersion=V5&SERVLET_NAME=WCCMainPlatV5&TXCODE=NYY010", "_blank"))
                    // Button("预约取款").click(go("预约取款/index.html", "_blank"))
                    // Button("兑换外币现钞").click(go("https://sinfo.ccb.com/tran/WCCMainPlatV5?CCB_IBSVersion=V5&SERVLET_NAME=WCCMainPlatV5&TXCODE=NYY025", "_blank"))
                    // Button("养老金查询").click(go("http://accounts.ccb.com/tran/WCCMainPlatV5?CCB_IBSVersion=V5&SERVLET_NAME=WCCMainPlatV5&TXCODE=NQ0000&FLAG=3", "_blank"))
                    // Button("社保公积金查询").click(go("http://accounts.ccb.com/tran/WCCMainPlatV5?CCB_IBSVersion=V5&SERVLET_NAME=WCCMainPlatV5&TXCODE=NQ0000&FLAG=2", "_blank"))

                    Button("帮助").click(go("/cn/bfree/barreier-free-help.html", "_blank"))

                    // Button("纯文本")
                    // .$on(function () {
                    // bfreeTool.pure_text.on()
                    // workbench.setConfig("pure_text", "1")
                    // })
                    // .$off(function () {
                    // bfreeTool.pure_text.off()
                    // workbench.setConfig("pure_text", false)
                    // })

                    Button("语音加速").click(function () {
                        bfreeTool.voice.play("语音加速")
                        bfreeTool.voice.speedUp()
                    })

                    Button("语音减速").click(function () {
                        bfreeTool.voice.play("语音减速")
                        bfreeTool.voice.speedDown()
                    })

                    Button("鼠标样式").next(".drop_list").click(function (e) {
                        var $target = $(e.target),
                            cursor = $target.closest("[cursor]").attr("cursor")

                        bfreeTool.cursor.set(cursor)
                        cursor ? workbench.setConfig("cursor", cursor) : workbench.setConfig("cursor", false)
                    })

                    Button("十字线")
                        .$on(function () {
                            moveCapture.set("cross_line", function (e) {
                                bfreeTool.cross_line.draw(e.clientX, e.clientY)
                            })
                            bfreeTool.cross_line.show()
                            workbench.setConfig("cross_line", "1")
                        })
                        .$off(function () {
                            moveCapture.remove("cross_line")
                            bfreeTool.cross_line.hide()
                            workbench.setConfig("cross_line", false)
                        })

                    Button("配色").next(".drop_list").click(function (e) {
                        var $target = $(e.target),
                            theme = $target.closest("[theme]").attr("theme"),
                            tuple = (theme || "_").split("_"),
                            background = tuple[0],
                            color = tuple[1]

                        bfreeTool.theme.set(background, color)
                        theme ? workbench.setConfig("theme", theme) : workbench.setConfig("theme", false)
                    })

                    Button("老人服务").click(function () {
                        workbench.$elem.show()
                        workbench.$reader_elem.hide()
                        workbench.setConfig("reader_area", false)
                    })

                    Button("退出服务").click(function () {
                        removeCookie("bfree")
                        //workbench.setConfig("pure_text", false)
                        workbench.setConfig("cross_line", false)
                        workbench.setConfig("cursor", false)

                        ~location.search.indexOf("bfree") ? (location.search = location.search.replace(/bfree=[^&]*/, "")) : location.reload()
                    })

                    $(".drop_list:not(.unactive)").click(function (e) {
                        var $target = $(e.target)
                        $target.closest("li").addClass("active").siblings().removeClass("active")
                    })

                    restore()

                    var config = workbench.getConfig()

                    //config["pure_text"] && Button("纯文本").$on()
                    Button("声音开关").$on()
                    Button("大字幕").$off()
                    Button("语音指读").$on()
                    bfreeTool.voice.speedReset()

                    config["cross_line"] && Button("十字线").$on()
                    config["reader_area"] && Button("读屏专用").click()
                    config["soundOff"] && Button("声音开关").$off()

                    var cursor = config["cursor"]
                    cursor && Button("鼠标样式").next(".drop_list").find("[cursor=" + cursor + "]").click()

                    var theme = config["theme"]
                    theme && Button("配色").next(".drop_list").find("[theme=" + theme + "]").click()
                },
                keepSize: function () {
                    var fix_zoom = 1 / pageZoom

                    if (useCssZoom) {
                        createStyle("bfree_css_zoom", "bfree_css", ".bfree_zoom{zoom:" + fix_zoom + "!important;}")
                    } else {
                        $(".bfree_zoom").toArray().forEach(function (bfree_zoom_elem) {
                            $(bfree_zoom_elem).height($(bfree_zoom_elem.firstChild).height() * fix_zoom)
                        })
                    }
                },
                setReaderArea: function () {
                    if (this.readerAreaSetted) return

                    this.readerAreaSetted = true

                    var areaNames = ["nav", "window", "interactive", "list", "article", "servis"],
                        areaDescs = [],
                        areaTotal = 0,
                        areas = {}

                    areaNames.forEach(function (areaName) {
                        var $area_elem = $(".bfree_area_" + areaName),
                            $area_tab = $("#nav_" + areaName),
                            area_chinese = $area_tab.find(">b").text(),
                            area_elem_count = $area_elem.length

                        $area_tab.find(">span").text("(" + area_elem_count + ")")

                        if (area_elem_count) {
                            areaTotal += area_elem_count
                            areaDescs.push(area_elem_count + "个" + area_chinese)
                            areas[areaName] = $area_elem
                            $area_tab.click(locateOn($area_elem))
                            $area_elem.filter("a:not([href])").attr("tabindex", "0")
                            $area_elem.filter(":not(a,:input,[tabindex])").prepend('<a class="bfree_area_locate_point" tabindex="0"></a>')
                        }
                    })

                    if (!areaTotal) return

                    var restore = ignoreBelowEvent()

                    $("body")
                        .prepend('<style id="bfree_css_locate" class="bfree_css">.bfree_area_locate_outline{outline:2px solid red;outline-offset:-1px;}.bfree_area_locate_point{width:1px!important;height:0px!important;float:left!important;}.bfree_area_locate_bg{background-color:rgba(127,127,127,0.4);}</style>')
                        .focusin(function (e) {
                            var $focus = $(e.target)
                            if ($focus.hasClass("bfree_area_locate_point")) {
                                $(".bfree_area_locate_bg").removeClass("bfree_area_locate_bg")
                                $focus.parent().addClass("bfree_area_locate_bg")
                            } else {
                                $(".bfree_area_locate_outline").removeClass("bfree_area_locate_outline")
                            }
                        })
                        .click(function (e) {
                            var $elem = $(e.target)
                            if (!$elem.closest(".bfree_area_locate_outline,.bfree_spkoly_lis").length) {
                                $(".bfree_area_locate_outline").removeClass("bfree_area_locate_outline")
                            }
                        })

                    restore()

                    var descText = "本页是由" + areaDescs.join("、") + "共计" + areaTotal + "个区域组成，操作帮助请按Alt加问号键",
                        shortcut = this.shortcut

                    bfreeTool.voice.play(descText)
                    bfreeTool.textScreen.setText(descText)

                    shortcut.set("alt+1", locateOn(areas.nav))
                    shortcut.set("alt+2", locateOn(areas.window))
                    shortcut.set("alt+3", locateOn(areas.interactive))
                    shortcut.set("alt+4", locateOn(areas.list))
                    shortcut.set("alt+5", locateOn(areas.article))
                    shortcut.set("alt+6", locateOn(areas.servis))

                    function locateOn($area_elem) {
                        if (!$area_elem) return

                        return function () {
                            var nextIndex = ($area_elem.index($area_elem.filter(".bfree_area_locate")) + 1) % $area_elem.length,
                                $target = (
                                    $(".bfree_area_locate").removeClass("bfree_area_locate bfree_area_locate_outline"),
                                    $area_elem.eq(nextIndex).addClass("bfree_area_locate bfree_area_locate_outline")
                                ),
                                $focus = $target.find(">.bfree_area_locate_point")

                            scrollToView($target[0])
                            $focus.length || ($focus = $target)
                            $focus.focus()
                        }
                    }
                },
                height: function () {
                    return (!!workbench.getConfig("reader_area") ? $("#bfree_view_reader").height() : $("#bfree_view_main").height()) / cssZoomFactor
                },
                initConfig: function () {
                    var config_json_str = getCookie("bfree_config")
                    this._config = config_json_str ? JSON.parse(config_json_str) : {}
                },
                setConfig: function (name, value) {
                    if (value === false) {
                        delete this._config[name]
                    } else {
                        this._config[name] = value
                    }
                    setCookie("bfree_config", JSON.stringify(this._config))
                },
                getConfig: function (name) {
                    return name ? this._config[name] : Object.assign({}, this._config)
                }
            }

            function Shortcut() {
                this.listener = null
                this.callbacks = {}
            }

            Shortcut.prototype = {
                constructor: Shortcut,
                set: function (shortcut_key, fn) {
                    if (typeof fn !== "function") return

                    shortcut_key = shortcut_key.toLowerCase()

                    if (this.callbacks[shortcut_key]) return

                    this.callbacks[shortcut_key] = fn
                    this.start()
                },
                remove: function (shortcut_key) {
                    shortcut_key = shortcut_key.toLowerCase()
                    this.callbacks[shortcut_key] = null
                    delete this.callbacks[shortcut_key]

                    if (!Object.keys(this.callbacks).length) {
                        this.stop()
                    }
                },
                start: function () {
                    if (this.listener) return

                    var callbacks = this.callbacks

                    this.listener = function (e) {
                        var key = e.key.toLowerCase()
                        if (~["alt", "ctrl", "shift"].indexOf(key)) return

                        var _key = "",
                            combineKey = []

                        e.ctrlKey && combineKey.push("ctrl")
                        e.altKey && combineKey.push("alt")
                        e.shiftKey && (combineKey.push("shift"), e.keyCode !== e.key.charCodeAt(0) && (_key = String.fromCharCode(e.keyCode)))

                        var shortcut_key = combineKey.concat(key).join("+")
                        callbacks[shortcut_key] && callbacks[shortcut_key]()

                        var shortcut_key2 = combineKey.concat("[" + e.keyCode + "]").join("+")
                        callbacks[shortcut_key2] && callbacks[shortcut_key2]()

                        if (_key) {
                            var shortcut_key3 = combineKey.concat(_key).join("+")
                            callbacks[shortcut_key3] && callbacks[shortcut_key3]()
                        }
                    }

                    keyupCapture.set("shortcut", this.listener)
                },
                stop: function () {
                    if (!this.listener) return

                    keyupCapture.remove("shortcut")
                    this.listener = null
                }
            }

            return new Workbench()
        }

        function markPlayingElem(elem, shouldMark) {
            if (isFrameInfo(elem)) {
                return void winMessage.send(elem.frame, "markPlayingElem", elem.elem_id, shouldMark)
            }

            elem = normalizeElem(elem)

            elem.nodeType === 3 && (elem = elem.parentNode)

            if (shouldMark) {
                var style = $(elem).attr("style"),
                    cssStyle = elem.innerText
                        ? { "text-decoration": "underline" }
                        : { "outline": "2px solid red", "outline-offset": "-1px" }

                $(elem).css(cssStyle).data("style", style || null)
                scrollToView(elem)

                var elemInfo = getElemInfo(elem)
                if (elemInfo && elemInfo.name === "链接") {
                    keyupCapture.set("continuousPlay_enter", function (e) {
                        if (e.keyCode !== 13) return
                        elem.click()
                    })
                }
            } else {
                var style = $(elem).data("style")
                if (style !== void 0) {
                    $(elem).attr("style", style)
                }

                keyupCapture.remove("continuousPlay_enter")
            }
        }

        function getNextElem(elem) {
            if (isFrameInfo(elem)) {
                return new Promise(function (resolve) {
                    winMessage.send(elem.frame, "getNextElem", elem.elem_id).waitReply(function (reply, frame_id, next) {
                        timeout && clearTimeout(timeout)
                        timeout = void 0

                        if (next) {
                            if (typeof next !== "string") {
                                if (!isInFrame) {
                                    next.frame = frameWindows[next.frame_id]
                                }
                                resolve(next)
                            } else {
                                resolve(createFrameInfo(reply.target, { frame_id: frame_id, elem_id: next }))
                            }
                        } else if (!isInFrame) {
                            /* 由顶层窗口直接获取 iframe 元素的下一个元素 */
                            var frameElem = getFrameElem(reply.target)
                            resolve(getNextElem(frameElem))
                        }
                    })

                    var timeout = setTimeout(function () {
                        timeout = void 0
                        console.log("查找下一个元素，超时")
                        resolve()
                    }, 3000)
                })
            }

            if (!elem) return Promise.resolve()

            elem = normalizeElem(elem)

            var next = elem.nextSibling

            if (!next) {
                /**
                 * 查找下一个最近的分支节点
                 */
                do {
                    elem = elem.parentNode
                    next = elem && elem.nextSibling
                } while (elem && !next)

                /**
                 * 没有找到分支节点，代表窗口已经没有下一个元素
                 */
                if (!next) {
                    /**
                     * 如果当前窗口是顶层窗口，结束查找，否则退出iframe，在父窗口继续查找
                     */
                    return isInFrame && parent !== top
                        /**
                         * 如果父窗口不是顶层窗口，向父窗口发送命令，由父窗口获取 iframe 元素的下一个元素
                         * 如果父窗口是顶层窗口，结束当前窗口查找，由顶层窗口直接获取 iframe 元素的下一个元素
                        */
                        ? getNextElem(createFrameInfo(parent))
                        : Promise.resolve()
                }
            }

            /**
             * 查找可用的叶子节点
             */
            while (next && next.nodeType === 1 && !excludeElem(next) && checkVisible(next) && next.childNodes[0]) {
                next = next.childNodes[0]
            }

            return Promise.resolve(checkVisible(next) && (next.nodeType === 3 ? /\S/.test(next.textContent) : next.nodeType === 1))
                .then(function (isReadable) {
                    return isReadable
                        ? next.nodeName && next.nodeName.toLowerCase() === "iframe"
                            /**
                             * 当找到的是iframe元素，则进入iframe，获取第一个元素
                            */
                            ? getNextElem(createFrameInfo(next.contentWindow))
                            : next
                        : getNextElem(next)
                })

            function excludeElem(elem) {
                return $(elem).is("body > .sidebar,select")
            }
        }

        function extractText(elem, isPrependElemDesc, isDeep) {
            if (isFrameInfo(elem)) {
                return new Promise(function (resolve) {
                    winMessage.send(elem.frame, "extractText", elem.elem_id, isPrependElemDesc).waitReply(function (reply, text) {
                        resolve(text)
                    })
                })
            }

            elem = normalizeElem(elem)

            var nodeType = elem.nodeType,
                isElem = nodeType === 1,
                isText = nodeType === 3,
                isVisible = checkVisible(elem)

            if (!isVisible) {
                return Promise.resolve("")
            }

            if (isText) {
                return Promise.resolve(elem.textContent.match(/\S/) ? elem.textContent : "")
            }

            if (!isElem) return Promise.resolve("")

            var nodeName = elem.nodeName.toLowerCase()

            if (nodeName === "script" || nodeName === "style") {
                return Promise.resolve("")
            }

            var text = elem.getAttribute("aria-label") || nodeName === "img" && elem.getAttribute("alt") || ""

            if (text) return Promise.resolve(text)

            var elemInfo = getElemInfo(elem)

            if (elemInfo) {
                text = elemInfo.content

                if (isPrependElemDesc !== false && elemInfo.desc) {
                    text = text ? [elemInfo.desc, text].join(",") : elemInfo.desc
                }

                if (text) return Promise.resolve(text)
            }

            var texts = []

            $(elem.childNodes).each(function (i, child) {
                var nodeType = child.nodeType,
                    childText

                if (nodeType === 3 && child.textContent.match(/\S/)) {
                    childText = child.textContent
                } else if (nodeType === 1) {
                    var childName = child.nodeName.toLowerCase()

                    if (~["a", "span", "p"].indexOf(childName)) {
                        childText = child.innerText
                    } else if (isDeep) {
                        childText = extractText(child, isPrependElemDesc, isDeep)
                    }
                }

                childText && texts.push(childText)
            })

            texts.length && (text = texts.join("\n"))

            return Promise.resolve(text)
        }

        function checkVisible(elem) {
            var target = elem.nodeType === 3 ? elem.parentNode : elem,
                isVisible = $(target).is(":visible")
            return isVisible
        }

        function getBodyAttribute(attr) {
            return document.documentElement[attr] || document.body[attr]
        }

        function scrollToView(elem) {
            elem.nodeType === 3 && (elem = elem.parentNode)

            var stableDistance = 40,
                belowWorkBenchDistance = 60

            if (isInFrame) {
                winMessage.send(parent, "frameOutsideInfo").waitReply(function (reply, outsideInfo) {
                    var outScrollTop = outsideInfo.scrollTop,
                        nowScrollY = getBodyAttribute("scrollTop") + outScrollTop,
                        workbench_height = outsideInfo.workbench_height,
                        willScrollY = (offset(elem).top + outsideInfo.top - workbench_height - belowWorkBenchDistance) * cssZoomFactor

                    if (Math.abs(nowScrollY - willScrollY) > stableDistance) {
                        winMessage.send(top, "scrollTo", willScrollY)
                    }
                })
            } else {
                var nowScrollY = getBodyAttribute("scrollTop"),
                    workbench_height = workbench.height(),
                    willScrollY = (offset(elem).top - workbench_height - belowWorkBenchDistance) * cssZoomFactor

                if (Math.abs(nowScrollY - willScrollY) > stableDistance) {
                    window.scrollTo(0, willScrollY)
                }
            }
        }

        function normalizeElem(elem) {
            elem = elem.nodeType ? elem : elem.target
            elem === document && (elem = elem.documentElement)
            return elem
        }

        function createFrameInfo(frame, info) {
            return Object.assign({
                frame: frame
            }, info)
        }

        function isFrameInfo(frameInfo) {
            return frameInfo && (frameInfo.frame || frameInfo.frame_id)
        }

        var getElemInfo = function () {
            var specialElemDefine = {
                "a[href]:not([href^=javascript]):not([href^=#])": {
                    name: "链接",
                    content: function ($elem) {
                        return $elem.text()
                    }
                },
                ".select_list": {
                    name: "下拉框",
                    content: function ($elem) {
                        return $elem.find(".select_value").text()
                    }
                },
                "#header_box .chengshixuanze .select-city": {
                    name: "地区选择器",
                    content: function ($elem) {
                        return $elem.text()
                    }
                },
                "[onclick^=laydate]": {
                    name: "日期选择器",
                    content: function ($elem) {
                        var clickEvent = $elem.attr("onclick"),
                            matcher = clickEvent.replace(/\s/g, "").match(/laydate\({elem:['"]([^'"]+)['"]}\)/),
                            selector = matcher && matcher[1]

                        if (selector) {
                            return $(selector).val()
                        }
                    }
                },
                ":text": {
                    name: "输入框",
                    content: function ($elem) {
                        return $elem.val() || $elem.attr("placeholder") || ""
                    }
                },
                ":password": { name: "密码输入框" },
                ":checkbox": {
                    name: "复选框",
                    desc: function ($elem) {
                        var name = "复选框"
                        return $elem.prop("checked") ? name + "已选中" : name
                    }
                },
                ":radio": {
                    name: "单选框",
                    desc: function ($elem) {
                        var name = "单选框"
                        return $elem.prop("checked") ? name + "已选中" : name
                    }
                },
                ":file": {
                    name: "文件选择按钮",
                    content: function ($elem) {
                        return $elem.val()
                    }
                },
                ":submit": {
                    name: "提交按钮",
                    content: function ($elem) {
                        return $elem.is("input") ? $elem.val() : $elem.text()
                    }
                },
                ":button": {
                    name: "按钮",
                    content: function ($elem) {
                        return $elem.is("input") ? $elem.val() : $elem.text()
                    }
                },
                "select": {
                    name: "下拉框",
                    content: function ($elem) {
                        var elem = $elem[0]
                        return elem.options[elem.selectedIndex].innerText
                    }
                },
                "textarea": {
                    name: "文本框",
                    content: function ($elem) {
                        return $elem.val() || $elem.attr("placeholder") || ""
                    }
                }
            }

            return function (elem) {
                var $elem = $(elem)

                for (var selector in specialElemDefine) {
                    var handler = specialElemDefine[selector]

                    if ($elem.is(selector)) {
                        return {
                            name: handler.name,
                            desc: typeof handler.desc === "function" ? handler.desc($elem) : handler.name,
                            content: typeof handler.content === "function" && handler.content($elem)
                        }
                    }
                }
            }
        }()

        function handlePageSetting(createPageSetting) {
            if (typeof createPageSetting !== "function") return

            var pathname = location.pathname,
                tool = {
                    playImgCode: playImgCode,
                    createStyle: createStyle,
                    setInterval: setInterval
                },
                pageSetting = createPageSetting(tool, bfreeArea, bfreeTool),
                isSet = false

            for (var pathInfo in pageSetting) {
                var handler = pageSetting[pathInfo]

                if (typeof handler !== "function") continue

                var paths = pathInfo.split("|")

                for (var i = 0, len = paths.length; i < len; i++) {
                    var path = paths[i]

                    if (pathname.indexOf(path) === 0) {
                        handler()
                        isSet = true
                    }
                }
            }

            return isSet
        }

        function playImgCode(imgCodeElem) {
            if (typeof imgCodeElem === "function") {
                imgCodeElem(createVoiceButton)
            } else if (imgCodeElem && imgCodeElem.nodeName.toLowerCase() === "img") {
                createVoiceButton(imgCodeElem).insertAfter(imgCodeElem)
            } else {
                $("img[src^='/NCCB_Encoder/Encoder'],img#valImg").each(function (i, elem) {
                    createVoiceButton(elem).insertAfter(elem)
                })
            }

            function createVoiceButton(imgCodeElem) {
                return $('<img aria-label="读出验证码" src="' + sourceHost + '/ccbctp/new/app_xyk/images/verifySpeak.gif" style="cursor: pointer;" alt="读出验证码" title="读出验证码">')
                    .click(function (e) {
                        $("#encoder_sound").remove();

                        var codeMatcher = imgCodeElem.src.match(/code=([^&]+)/i),
                            code = codeMatcher && codeMatcher[1],
                            soundAddress = "/tran/ACVoiceJyServlet?lan=CN&code=" + code

                        if (isInFrame) {
                            winMessage.send(top, "playSource", soundAddress, { forcePlay: true })
                        } else {
                            bfreeTool.voice.pause()
                            bfreeTool.voice.playSource(soundAddress, { forcePlay: true })
                        }

                        e.stopPropagation()
                        e.preventDefault()
                    })
            }
        }

        function setImgCode() {
            playImgCode()

            mouseCapture.set("magnifyGlass", function (e) {
                if (!e.target) return

                showMagnifyGlassOfImgCode(e.target)
            })
        }

        function showMagnifyGlassOfImgCode(elem) {
            if (elem.nodeName === "IMG" && ~elem.src.indexOf("/NCCB_Encoder/Encoder")) {
                bfreeTool.magnifyGlass.set(elem, 2)
            } else if (elem !== bfreeTool.magnifyGlass.canvas) {
                bfreeTool.magnifyGlass.hide()
            }
        }

        function setIcon(name, iconClass) {
            var $icon = Button(name).find(".icon")
            $icon.removeClass().addClass("icon").addClass(iconClass)
        }

        function go(url, owin) {
            return function () {
                window.open(url, owin || "_self")
            }
        }
    })

    function EventCapture(eventType, selector) {
        this.eventType = eventType
        this.listener = null
        this.callbacks = {}
        this.selector = selector || document
    }
    EventCapture.prototype = {
        set: function (key, fn) {
            if (typeof fn !== "function" || this.callbacks[key]) return

            this.callbacks[key] = fn
            this.start()
        },
        remove: function (key) {
            this.callbacks[key] = null
            delete this.callbacks[key]

            if (!Object.keys(this.callbacks).length) {
                this.stop()
            }
        },
        has: function (key) {
            return this.callbacks.hasOwnProperty(key)
        },
        trigger: function (keys, data) {
            if (!this.listener) return

            var callbacks = this.callbacks

            if (keys === "all") {
                keys = Object.keys(callbacks)
            } else {
                keys = typeof keys === "string" ? [keys] : keys
            }

            keys.forEach(function (key) {
                if (callbacks.hasOwnProperty(key)) {
                    callbacks[key](data)
                }
            })
        },
        start: function () {
            if (this.listener) return

            var callbacks = this.callbacks

            this.listener = function (e) {
                for (var key in callbacks) {
                    if (callbacks.hasOwnProperty(key)) {
                        callbacks[key](e)
                    }
                }
            }

            var restore = ignoreBelowEvent()
            $(this.selector).on(this.eventType, this.listener)
            restore()
        },
        stop: function () {
            if (!this.listener) return

            $(this.selector).off(this.eventType, this.listener)
            this.listener = null
        }
    }

    var bfreeArea = function () {
        return {
            addNav: addArea("nav"),
            addWindow: addArea("window"),
            addInteractive: addArea("interactive"),
            addList: addArea("list"),
            addArticle: addArea("article"),
            addServis: addArea("servis")
        }

        function addArea(areaName) {
            return function (selector) {
                $(selector).addClass("bfree_area_" + areaName)
                return this
            }
        }
    }()

    var Button = function () {
        var buttons = {}

        function Button(name) {
            if (buttons[name]) return buttons[name]

            var $btn = buttons[name] = $(".bfree_btn:contains(" + name + ")").add($(".bfree_btn[name=" + name + "]"))

            return $.extend($btn, {
                $on: function (fn) {
                    if (typeof fn === "function") {
                        this._oncallback = fn
                        this.click(function () {
                            $btn.$state && typeof $btn._offcallback === "function"
                                ? $btn.$off()
                                : $btn.$on()
                        })
                    } else if (typeof this._oncallback === "function") {
                        this._oncallback.call($btn)
                        this.$state = true
                    }
                    return this
                },
                $off: function (fn) {
                    if (typeof fn === "function") {
                        this._offcallback = fn
                    } else if (typeof this._offcallback === "function") {
                        this._offcallback.call($btn)
                        this.$state = false
                    }
                    return this
                },
                $default: function (fn) {
                    if (typeof fn === "function") {
                        this._defaultCallback = fn
                    } else if (typeof this._defaultCallback === "function") {
                        this._defaultCallback.call($btn)
                    }
                    return this
                }
            })
        }

        return Button
    }()

    function supportKeyboard() {
        var allowFireOnPress = true,
            eventsOnEnter = ["click", "mousedown", "mouseup", "mouseover", "mouseenter", "focus", "focusin"],
            eventsOnEsc = ["mouseout", "mouseleave", "focusout"],
            eventsOnPress = eventsOnEnter.concat(eventsOnEsc),
            pageJquery = window.pageJquery

        /* 拦截jquery事件，添加tab触发器 */
        pageJquery && eventsOnPress.forEach(function (event) {
            var fn = pageJquery.prototype[event]
            pageJquery.prototype[event] = function () {
                if (arguments.length && allowFireOnPress) {
                    this.each(function (i, elem) {
                        supprtFocusAndMarkEvent(elem, event)
                    })
                }
                return fn.apply(this, arguments)
            }
        })

        var $on = pageJquery && pageJquery.prototype.on
        if ($on) {
            pageJquery.prototype.on = function (event, selector, fn) {
                if (
                    allowFireOnPress
                    && typeof event === "string"
                    && typeof selector === "string"
                    && typeof fn === "function"
                    && ~eventsOnPress.indexOf(event)
                ) {
                    var $elems = this.find(selector)
                    $elems.each(function (i, elem) {
                        supprtFocusAndMarkEvent(elem, event)
                    })
                }
                return $on.apply(this, arguments)
            }
        }

        $(function () {
            /* 为通过元素属性绑定的事件，添加tab触发器 */
            eventsOnPress.forEach(function (event) {
                $("[on" + event + "]").each(function (i, elem) {
                    supprtFocusAndMarkEvent(elem, event)
                })
            })

            /* 监听回车按键，触发事件 */
            $(document.body)
                .keyup(function (e) {
                    var keyCode = e.keyCode

                    if (keyCode !== 13 && keyCode !== 27) return

                    var $focus = pageJquery ? pageJquery(":focus") : $(":focus"),
                        event_for_keyboard = $focus.attr("event_for_keyboard")

                    if (!event_for_keyboard) return

                    var events = keyCode === 13 ? eventsOnEnter : eventsOnEsc

                    event_for_keyboard.split(",").forEach(function (event) {
                        ~events.indexOf(event) && $focus.trigger(event)
                    })
                })
                .append('<style class="bfree_css">:focus{outline:2px solid red;outline-offset:-1px;}</style>')
        })

        function supprtFocusAndMarkEvent(elem, event) {
            elem === document && (elem = elem.documentElement)

            var $a = $(elem).find(">a")

            $a.length === 1 && isSameSize($(elem), $a) && (elem = $a[0])

            if (elem.getAttribute("tabindex") < 0) return

            $(elem).is("a[href],:input") || elem.setAttribute("tabindex", "0")

            var event_for_keyboard = elem.getAttribute("event_for_keyboard")

            if (event_for_keyboard && ~event_for_keyboard.indexOf(event)) return

            event_for_keyboard = event_for_keyboard
                ? [event_for_keyboard, event].join(",")
                : event

            elem.setAttribute("event_for_keyboard", event_for_keyboard)

            handleSpecialElem(elem)
        }

        function handleSpecialElem(elem) {
            var $elem = $(elem)

            if ($elem.is(".select_list")) {
                $elem.click(function () {
                    $elem.find(".select_ul>ul>li:not([tabindex])").attr("tabindex", "0").attr("event_for_keyboard", "click")
                })
            }
        }

        function isSameSize($a, $b) {
            var sameWidth = $a[0].clientWidth === $b[0].clientWidth || $a.width() === $b.width(),
                sameHeight = $a[0].clientHeight === $b[0].clientHeight || $a.height() === $b.height()
            return sameWidth && sameHeight
        }

        return function ignoreBelowEvent() {
            var _allowFireOnPress = allowFireOnPress
            allowFireOnPress = false
            return function () {
                allowFireOnPress = _allowFireOnPress
            }
        }
    }

    function BfreeTool() {
        var bfreeTool

        function Zoom() {
            pageZoom = cssZoomFactor = this.zoom = 1
        }
        Zoom.prototype = {
            constructor: Zoom,
            reset: function () {
                this.setZoom(1)
            },
            increase: function () {
                if (this.zoom >= 1.3) return
                var zoom = (parseFloat(this.zoom) + 0.1).toFixed(1)
                this.setZoom(zoom)
            },
            decrease: function () {
                if (this.zoom <= 1) return
                var zoom = (parseFloat(this.zoom) - 0.1).toFixed(1)
                this.setZoom(zoom)
            },
            setZoom: function (zoom) {
                var $body = $("body")

                pageZoom = this.zoom = zoom

                if (useCssZoom) {
                    cssZoomFactor = zoom
                    $body.css({ "zoom": zoom, "overflow": "scroll" })
                    if (zoom == 1) {
                        $body.css({ "overflow": "" })
                    }
                } else {
                    cssScaleFactor = zoom
                    $body.css({ "transform": "scale(" + zoom + ")", "transform-origin": "center top" })
                }

                bfreeTool.cross_line.draw()
            }
        }

        function Cursor() {
            this.cursor = null
        }
        Cursor.prototype = {
            constructor: Cursor,
            set: function (cursor) {
                if (cursor) {
                    var cur_pic = "/cn/bfree/images/" + cursor + ".cur";
                    createStyle("bfree_css_cursor", "", "*{cursor:url(" + cur_pic + "), auto!important}")
                } else {
                    createStyle("bfree_css_cursor", "", "")
                }

                this.cursor = cursor
            },
            reset: function () {
                this.set(null)
            }
        }

        function CrossLine() {
            this.h_line = null
            this.v_line = null
            this.clientX = this.clientY = null
        }
        CrossLine.prototype = {
            constructor: CrossLine,
            draw: function (clientX, clientY) {
                if (clientX == void 0) clientX = this.clientX
                if (clientY == void 0) clientY = this.clientY

                var top = (clientY - 10) / cssZoomFactor,
                    left = (clientX - 10) / cssZoomFactor

                this.h_line && this.h_line.css("top", top)
                this.v_line && this.v_line.css("left", left)
                this.clientX = clientX
                this.clientY = clientY
            },
            show: function () {
                var $body = $("body")
                this.h_line = $("<div id='slideLateral'></div>")
                this.v_line = $("<div id='slideLongitudinal'></div>")
                $body.append(this.h_line)
                $body.append(this.v_line)
            },
            hide: function () {
                this.h_line.remove()
                this.v_line.remove()
                this.h_line = this.v_line = null
            }
        }

        function Theme() { }
        Theme.prototype = {
            constructor: Theme,
            set: function (background, color) {
                this.exclude(".header_box .logo img,#fsD1,.bfree_elem,#slideLateral,#slideLongitudinal")
                $(".header_box .logo img").css({ "background-color": "#ffffff" })

                var $body = $("body"),
                    shouldSet = background || color

                background = background || "none"
                color = color || "none"

                $body.find(":not(.bfree_theme,.bfree_theme_exclude_self,.bfree_theme_exclude,.bfree_theme_exclude *)").add($body).each(function () {
                    $(this).addClass("bfree_theme")
                })

                var cssText = shouldSet
                    ? '.bfree_theme{background-color:' + background + '!important;color:' + color + '!important;background-image:none!important;}'
                    : '.bfree_theme{}'

                createStyle("bfree_css_theme", "bfree_css", cssText)
            },
            excludeSelf: function (selector) {
                $(selector).addClass("bfree_theme_exclude_self")
            },
            exclude: function (selector) {
                $(selector).addClass("bfree_theme_exclude")
            }
        }

        function PureText() {
            this.status = null
        }
        PureText.prototype = {
            constructor: PureText,
            on: function () {
                var $doc = $(document.documentElement)

                $doc.find("link,style:not(.bfree_css)").remove()

                $("body").find("*:not(.bfree_elem,.bfree_elem  *)").each(function () {
                    if (this.tagName == "IMG") {
                        var imgAlt = "";
                        if (this.alt && this.alt !== "无意义图片") {
                            imgAlt = this.alt;
                        }
                        $(this).replaceWith('<span>' + imgAlt + '</span>');
                    } else if (this.tagName == "A" && this.innerHTML == "") {
                        this.innerHTML = this.title || this.alt || ""
                    } else {
                        $(this).removeAttr("style").removeAttr("background").removeAttr("valign")
                            .removeAttr("align").removeAttr("height").removeAttr("width");
                        if (this.tagName != "A") {
                            $(this).css("text-decoration", "none");
                        }
                    }
                });
            },
            off: function () {
                location.reload()
            }
        }

        function TextScreen() {
            this.$elem = null
            this.isVisible = false
        }
        TextScreen.prototype = {
            constructor: TextScreen,
            init: function () {
                var $bigText_html = $('<div id="bfree_view_bigtext" class="bfree_elem bfree_zoom"><div class="TextScreen" id="TextScreen"><div class="BTnav"><div class="highContrast"><a href="javascript:void(0)" theme="#fff_#000" id="bigtext_hic_t1">白底黑字</a><a href="javascript:void(0)" theme="#00f_#ff0" id="bigtext_hic_t2">蓝底黄字</a><a href="javascript:void(0)" theme="#ff0_#000" id="bigtext_hic_t3">黄底黑字</a><a href="javascript:void(0)" theme="#000_#ff0" id="bigtext_hic_t4">黑底黄字</a><a href="javascript:void(0)" id="bigtext_hic_t5">默认配色</a></div></div><div class="BTcont" id="BTcont"><h1 id="BigText_Content"></h1></div></div></div>')
                $("body").append($bigText_html)
                this.$elem = $bigText_html

                $(".highContrast", this.$elem).on("click", "a", function () {
                    var theme = ($(this).attr("theme") || "_").split("_"),
                        background = theme[0],
                        color = theme[1]
                    $("#BTcont,#BigText_Content").css({ "background-color": background, "color": color })
                })
            },
            toggle: function () {
                this.isVisible ? this.hide() : this.show()
            },
            show: function () {
                if (!this.$elem) this.init()
                this.$elem.show()
                this.isVisible = true
            },
            hide: function () {
                this.$elem && this.$elem.hide()
                this.isVisible = false
            },
            setText: function (text) {
                $("#BigText_Content", this.$elem).text(text)
            }
        }

        var Voice = function () {
            var sourceCache = {}

            function Voice() {
                this.voice_type = '1'// 语种
                this.speed = '0'// 语速
                this.vcn = '65620'// 发音人id
                this.audio = null
                this.session = null
                this.state = true
            }

            Voice.prototype = {
                constructor: Voice,
                serveUrl: 'wss://voicesrv1.ccb.com:1030/https_tts_prx', // 服务url
            	playUrl: 'https://voicesrv1.ccb.com:1030/ttsyp/',//播放地址
                speedReset: function () {
                    this.speed = '0'
                },
                speedUp: function () {
                    this.speed = Math.min(parseFloat(this.speed) + 100, 500).toFixed(0)
                },
                speedDown: function () {
                    this.speed = Math.max(parseFloat(this.speed) - 100, -500).toFixed(0)
                },
                on: function () {
                    this.state = true
                },
                off: function () {
                    this.state = false
                    this.pause()
                },
                pause: function () {
                    this.playing && this.playing.pause()
                    this.rejectQueueBlock && this.rejectQueueBlock()
                    this.voice_id = this.queue = this.playing = this.rejectQueueBlock = null
                },
                playSource: function (src, config) {
                    var voice = this,
                        text = sourceCache[src] || src,
                        forcePlay = config && config.forcePlay

                    if (!this._canPlay()) return Promise.resolve()

                    return new Promise(function (resolve) {
                        console.log("开始播放：" + text)

                        if (isIE) {
                            var audio = voice.audio = $('<embed src="' + src + '" hidden="true" id="voice_player"></embed>')[0]

                            setInterval(function () {
                                var playState = audio.PlayState

                                if (playState <= 1) {
                                    audio.onpause && audio.onpause()
                                }

                                return playState <= 1
                            }, 100)
                        } else {
                            var audio = voice.audio

                            if (!audio) {
                                audio = voice.audio = document.createElement('audio')
                                $("body").append(audio)
                            }

                            audio.src = src

                            audio.play()["catch"](function (err) {
                                voice.playing = null
                                console.log("播放出错：" + text, err.message)
                                resolve()
                            })
                        }

                        voice.playing = audio

                        if (forcePlay) {
                            voice.playing.forcePlay = true
                        }

                        audio.onpause = function () {
                            voice.playing = null
                            console.log("播放结束：" + text)
                            resolve()
                        }
                    })
                },
                play: function (text, config) {
                    console.log(text)

                    if (!this._canPlay()) return Promise.resolve(text)

                    this.pause()

                    if (text == void 0 || !/[a-zA-Z0-9\u4e00-\u9fa5]/.test(text)) return Promise.resolve(text)

                    var voice = this,
                        sentences = splitText(text),
                        voice_id = this.voice_id = Math.random(),
                        _await = Promise.resolve(),
                        block = false,
                        maxIndex = sentences.length - 1

                    return sentences
                        .reduce(function (_await, sentence, i) {
                            return _await.then(function () {
                                if (voice_id !== voice.voice_id) return
                                console.log("请求开始：" + sentence)
                                return voice._getSource(sentence).then(function (src) {
                                    console.log("请求完成：" + sentence)
                                    if (voice_id !== voice.voice_id) return

                                    var shouldCreateBlock = !block && i < maxIndex - 1 && voice.queue && voice.queue.length >= 1

                                    if (shouldCreateBlock) {
                                        /* 先创建阻塞，在后一个请求使用，后一个请求的语音作为解除阻塞后的请求缓冲 */
                                        console.log("创建阻塞：" + sentence)
                                        block = new Promise(function (resolve, reject) {
                                            voice.rejectQueueBlock = reject
                                            voice._queueSource(src, config, voice_id, function () {
                                                block = false
                                                console.log("解除阻塞：" + sentence)
                                                voice.rejectQueueBlock = null
                                                resolve()
                                            })
                                        })
                                    } else {
                                        voice._queueSource(src, config, voice_id)
                                    }

                                    if (!shouldCreateBlock && block) {
                                        console.log("添加阻塞：" + sentence)
                                        return block
                                    }
                                })
                            })
                        }, _await)
                        .then(function () {
                            return voice.queue && voice.queue.cosumer
                        })
                        .then(function () {
                            return text
                        })
                },
                _canPlay: function () {
                    return this.state && (!this.playing || !this.playing.forcePlay)
                },
                _getSession: function () {
                    if (!this.session) {
                        this.session = new window.IFlyTtsSession({
                            'serveUrl': this.serveUrl,
                            'reconnection': true,
                            'reconnectionDelay': 30000
                        })
                    }
                    return this.session
                },
                _getSource: function (text) {
                    var ssbParam = { 'vcn': this.vcn, 'type': this.voice_type, 'spd': this.speed },
                        flag = "" + this.vcn + this.voice_type + this.speed,
                        voice = this

                    return new Promise(function (resolve, reject) {
                        voice._getSession().start(ssbParam, text, function (err, obj) {
                            if (err) {
                                reject(err)
                            } else {
                                var src = voice.playUrl + obj.audio_url

                                sourceCache[src] = text
                                sourceCache[text + flag] = src

                                resolve(src)
                            }
                        })
                    })
                },
                _queueSource: function (src, config, voice_id, onended) {
                    var voice = this,
                        queue = this.queue || (this.queue = []),
                        text = sourceCache[src]

                    queue.push([src, config, voice_id, onended, text])

                    console.log("加入队列：" + text + ",队列数" + queue.length)

                    if (!queue.cosumer) {
                        queue.cosumer = consume().then(function () {
                            voice.queue = null
                        })
                    }

                    return queue.cosumer

                    function consume() {
                        var queue = voice.queue,
                            voiceInfo = queue && queue.shift()

                        if (!voiceInfo) return Promise.resolve()

                        var src = voiceInfo[0],
                            config = voiceInfo[1],
                            voice_id = voiceInfo[2],
                            onended = voiceInfo[3],
                            text = voiceInfo[4]

                        if (voice_id !== voice.voice_id) {
                            onended && onended()
                            return Promise.resolve()
                        }

                        console.log("消费队列：" + text + ",剩余" + queue.length)

                        return voice.playSource(src, config).then(function () {
                            typeof onended === 'function' && onended()

                            if (!queue.length) return

                            return consume()
                        })
                    }
                }
            }

            function splitText(text) {
                if (text.length <= 30) return [text]

                return text.split(/，|。|\n/).map(function (text) { return text.trim() }).filter(Boolean)
            }

            return Voice
        }()

        function MagnifyGlass() {
            this.$canvas = this.canvas = this.ctx = null
        }
        MagnifyGlass.prototype = {
            constructor: MagnifyGlass,
            init: function () {
                var _self = this

                this.$canvas = $('<canvas id="magnify_glass" class="bfree_elem"></canvas>')
                    .appendTo('body')
                    .hide()
                    .css({
                        "position": "absolute",
                        "padding": "3px",
                        "border": "1px solid #02599c",
                        "box-shadow": "2px 2px 6px #666",
                        "border-radius": "8px",
                        "background": "#fff"
                    })
                    .click(function () {
                        $(_self.img).click()
                        _self.drawImage()
                    })

                this.canvas = this.$canvas[0]
                this.ctx = this.canvas.getContext('2d')
            },
            set: function (img, scale) {
                if (!this.canvas) this.init()

                scale = scale || 2

                var pos = offset(img),
                    imgW = $(img).width(),
                    imgH = $(img).height(),
                    width = imgW * scale,
                    height = imgH * scale,
                    x = pos.left - (width - imgW) / 2,
                    y = pos.top - (height - imgH) / 2

                this.img = img
                this.canvas.width = width
                this.canvas.height = height

                this.drawImage = drawImage
                this.drawImage()

                this.$canvas.css({
                    top: y,
                    left: x
                }).show()

                var _src
                function drawImage() {
                    var _self = this,
                        src = img.src

                    if (!_src) {
                        this.ctx.drawImage(img, 0, 0, width, height)
                    } else {
                        img.onload = function () {
                            _self.ctx.drawImage(img, 0, 0, width, height)
                            img.onload = null
                        }
                    }

                    _src = src
                    return true
                }
            },
            hide: function () {
                this.$canvas && this.$canvas.hide()
            }
        }

        return bfreeTool = {
            zoom: new Zoom(),
            cursor: new Cursor(),
            cross_line: new CrossLine(),
            theme: new Theme(),
            pure_text: new PureText(),
            textScreen: new TextScreen(),
            voice: new Voice(),
            magnifyGlass: new MagnifyGlass()
        }
    }

    function createWinMessage() {
        /* 窗口间消息交互 */
        function WindowMessage() {
            this._replyReceivers = {}
            this._commandHandlers = {}
            this._addMessageLinster()
            this._addReplyCommand()
        }
        WindowMessage.prototype = {
            constructor: WindowMessage,
            _separator: "|@|",
            _cmd$reply: "@reply",
            _addMessageLinster: function () {
                var _self = this
                window.addEventListener("message", function (e) {
                    if (0 && !_self._isWhiteHost(e.origin)) return console.error("不是有效的消息来源")

                    var msg = typeof e.data === "string" ? e.data.split(_self._separator) : e.data,
                        command = msg[0],
                        msgId = msg[1],
                        commandArgs = msg.slice(2)

                    if (command && msgId)
                        _self._execCommand(command, e, msgId, commandArgs)
                })
            },
            _isWhiteHost: function (host) {
                return /https?:\/\/([^.]+\.)*ccb.com/.test(host)
            },
            _execCommand: function (command, e, msgId, commandArgs) {
                var _self = this,
                    sourceWin = e.source,
                    commandHandler = this._commandHandlers[command]

                if (typeof commandHandler !== "function") return

                reply.target = sourceWin
                commandArgs = [reply].concat(commandArgs)

                commandHandler.apply(null, commandArgs)

                function reply() {
                    var replyArgs = [].slice.call(arguments),
                        args = [sourceWin, _self._cmd$reply].concat(msgId, replyArgs)
                    return _self.send.apply(_self, args)
                }
            },
            _addReplyCommand: function () {
                var _self = this
                this.addCommandHandler(this._cmd$reply, function (reply, msgId) {
                    if (typeof _self._replyReceivers[msgId] !== "function") return

                    var replyArgs = [].slice.call(arguments, 2)
                    _self._replyReceivers[msgId].apply(null, [reply].concat(replyArgs))
                    _self._replyReceivers[msgId] = null
                })
            },
            addCommandHandler: function (command, handler) {
                if (this._commandHandlers[command]) throw Error(command + " 命令已占用")
                this._commandHandlers[command] = handler
            },
            send: function (targetWindow, command) {
                var _self = this,
                    commandArgs = [].slice.call(arguments, 2),
                    msgId = + new Date + "" + (Math.random() * 1000 | 0),
                    msg = [command, msgId].concat(commandArgs)

                targetWindow.postMessage(msg, '*')

                return {
                    waitReply: function (replyReceiver) {
                        if (typeof replyReceiver !== "function") throw Error("参数必须是函数")
                        _self._replyReceivers[msgId] = replyReceiver
                    }
                }
            }
        }

        return new WindowMessage()
    }

    function getFrameElem(target) {
        return $("iframe").toArray().filter(function (frame) {
            return frame.contentWindow === target
        })[0]
    }

    function offset(elem) {
        var left = 0, top = 0;

        while (elem) {
            left += elem.offsetLeft
            top += elem.offsetTop
            elem = elem.offsetParent
        }

        return { left: left, top: top };
    }

    function setInterval(fn, interval, duration) {
        var timestamp = +new Date,
            sid = window.setInterval(function () {
                if (duration && +new Date - timestamp >= duration || fn() === true) {
                    clearInterval(sid)
                    timestamp = sid = void 0
                }
            }, interval)
    }

    function createStyle(id, className, cssText) {
        className = className || ""

        var $style = $("#" + id)

        if (!$style.length) {
            $style = $('<style id="' + id + '">' + cssText + '</style>').prependTo("body")
            className && $style.attr("class", className)
        } else {
            $style.text(cssText)
        }
    }

    function setCookie(key, value, expires) {
        document.cookie = key + "=" + encodeURIComponent(value) + ";domain=.ccb.com;path=/;" + (expires || "");
    }

    function getCookie(key) {
        var reg = new RegExp(key + "=([^;]+)"),
            cookie = document.cookie.match(reg)
        return cookie && decodeURIComponent(cookie[1]);
    }

    function removeCookie(key) {
        var value = getCookie(key),
            date = new Date()
        date.setTime(date.getTime() - 1)
        var dateGMT = date.toGMTString()
        setCookie(key, value, "expires=" + dateGMT + ";")
    }

    function debounce(fn, wait, immediate) {
        var timer, args, context, timestamp;
        function later() {
            var last = +new Date - timestamp;
            if (last < wait) {
                timer = setTimeout(later, wait - last);
            } else {
                timer = null;
                if (!immediate) {
                    fn.apply(context, args);
                    context = args = null;
                }
            }
        }
        return function () {
            context = this, args = arguments, timestamp = +new Date;
            var callNow = immediate && !timer;
            if (!timer) {
                timer = setTimeout(later, wait);
            }
            if (callNow) {
                fn.apply(context, args);
                context = args = null;
            } else if (typeof immediate === "function") {
                immediate()
            }
        }
    }

    function throttle(fn, interval) {
        var timer, lastTimestamp = 0

        return function () {
            if (timer) return

            var _self = this,
                args = arguments,
                timestamp = + new Date,
                pastTime = timestamp - lastTimestamp

            if (pastTime >= interval) {
                lastTimestamp = timestamp
                fn.apply(_self, args)
            } else {
                timer = setTimeout(function () {
                    timer = null
                    lastTimestamp = + new Date
                    fn.apply(_self, args)
                }, interval - pastTime)
            }
        }
    }

    function addEntrance() {
        $(function () {
            $('<li class="padding_13 header_top_right_a">|</li><li><a href="#" class="header_top_right_a" id="bfree_on">无障碍</a></li>')
                .appendTo(".header_top_right>ul")
                .find("#bfree_on")
                .click(function () {
                    setCookie("bfree", "1")
                    location.reload()
                })
        })
    }
}()